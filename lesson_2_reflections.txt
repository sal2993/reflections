What happens when you initialize a repository? Why do you need to do it?
- When you initialize a repository git creates the meta data you will need to
  make commits. It needs to be done because without 'git init' you wont have 
  the power of git.
How is the staging area different from the working directory and the
repository? What value do you think it offers?
- The staging area is different from the working directory and the repository
  because all it does is hold the files that will soon be made into a commit.
  The value it offers is that you do not have to add all of the files in your
  working directory to a commit.
How can you use the staging area to make sure you have one commit per logical
change?
- You can use the staging area to make sure you have one commit per logical
  change by adding the logical changes you made to files to the staging area
  then commiting the changes.
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- Branches would help keeping your history orginized by keeping different
  versions of your code. For example if you wanted to add a completly different
  new feature to some code, you could deviate from the master by branching.
  In the new branch you can go to town on your crazy new feature without
  disrupting the master.
How do the diagrams help you visualize the branch structure?
- Diagrams help visualize branch structure by physically being able to see the 
  history of the whole tree.
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- The result of merging two branches is that both the code of both branches
  will fuse into one branch. All the commits from both branches will now belong
  to one branch. We represent it in the diagram the way we do because both
  branches are being merged into one so logically we should depict it as such.
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
- The pros are that if the code is simple then it is really a no brainer for
  git to merge the two branches together. If two different branches make
  similar changes to the file then git makes a merge conflict which can be
  cumbersome.
